# Rules to build hugo sites in linux containers using podman
#
# All Hugo instances in this ruleset run in ephemeral OCI containers originated
# from a common base. Main project directory (PROJECT_ROOT) is shared with
# containers via bind mount, so containerized processes can access project
# files at `/mnt/projectRoot`

# --------------------------------------------------------------------------- #
# PUBLIC VARIABLE DEFAULTS                                                    #
# --------------------------------------------------------------------------- #

# Default image for the Hugo container
HUGO_CTN_IMAGE_DEFAULT := docker://docker.io/klakegg/hugo:latest

# Image URI for the Hugo container
#
# NOTE: A default is specified as a convenience for quick initial setup but
# should not be used outside of throw-away setups. Please override this value
# with a stable image URI instead.
HUGO_CTN_IMAGE ?= $(HUGO_CTN_IMAGE_DEFAULT)

# Default options to pass to Hugo server
define HUGO_SERVER_OPTIONS ?=
	--noHTTPCache
	--disableFastRender
	--cleanDestinationDir
	--cacheDir $(PROJECT_ROOT)/build/cache/hugo
endef

# Extra options to append to Hugo cmdline
HUGO_EXTRA_OPTIONS ?= # Empty on purpose

# --------------------------------------------------------------------------- #
# INTERNAL VARIABLES                                                          #
# --------------------------------------------------------------------------- #

hugoBuildDir = $(BUILD_DIR)/hugo
hugoSrcDir   = $(SRCDIR)/hugo
hugoSources := $(shell $(FIND) $(hugoSrcDir) -type f )

# Options for the container engine that runs Hugo
define hugoCtnOptions :=
	--rm
	-v "$(PROJECT_ROOT):/mnt/projectRoot"
	--workdir /mnt/projectRoot
endef

# Base options common to all Hugo instances
define hugoBaseOptions :=
	-s /mnt/projectRoot/$(hugoSrcDir)
	-d /mnt/projectRoot/$(hugoBuildDir)
endef

# Hugo build dependencies
define hugoBuildDeps :=
	$(hugoSources)
	$(BUILD_DIR)/buildinfo.json
	$(BUILD_DIR)/devicons.min.css
	lib/cv/build/cv.toml
endef

define hugoMultilineMakeVars :=
	HUGO_SERVER_OPTIONS HUGO_EXTRA_OPTIONS hugoCtnOptions hugoBaseOptions
	hugoBuildDeps
endef

# --------------------------------------------------------------------------- #
# PARAMETER PREPROCESSING                                                     #
# --------------------------------------------------------------------------- #

# Pre-strip multi line variables to avoid shell parsing issues
$(foreach v,$(hugoMultilineMakeVars),$(eval $(v) := $$(strip $$($v))))

# Emit a warning if selected container image is the default one
ifeq ($(HUGO_CTN_IMAGE),$(HUGO_CTN_IMAGE_DEFAULT))
	$(warn HUGO_CTN_IMAGE set to default value. This could have undesirable effects. Please override the value _BEFORE_ loading the module.)
endif

# --------------------------------------------------------------------------- #
# PUBLIC TARGETS                                                              #
# --------------------------------------------------------------------------- #

##
# @target hugo.server
# @brief Launch Hugo integrated development server
#
# The instantiated container has network isolation disabled, so the server
# is accessible without further shenanigans.
#
.SILENT .PHONY: hugo.server
hugo.server: $(hugoBuildDeps) hugo.setup

	echo "Starting Hugo development server"

	printf '\n%s\n\n' \
		"WARNING: This server can't trigger rebuild of extra-hugo files, so some dependencies will only be updated on server restart"

	exec $(PODMAN) run --pull never --net host \
		$(hugoCtnOptions) '$(HUGO_CTN_IMAGE)' $(hugoBaseOptions) \
		server $(HUGO_SERVER_OPTIONS) $(HUGO_EXTRA_OPTIONS)

##
# @target hugo.build
# @brief Launch Hugo site build process
#
# In general any file that exists in $(hugoBuildDir) must be built calling
# Hugo. Some files that need to be externally generated are listed as
# dependencies.
#
.SILENT .PHONY: hugo.build
.hugo.build: $(hugoBuildDeps) hugo.setup

	exec $(PODMAN) run --pull never --net host \
		$(hugoCtnOptions) '$(HUGO_CTN_IMAGE)' $(hugoBaseOptions) \
		$(HUGO_EXTRA_OPTIONS)

# --------------------------------------------------------------------------- #
# INTERNAL TARGETS                                                            #
# --------------------------------------------------------------------------- #

# This recipe does some preliminary setup needed to run other recipes
# This is so we don't pollute other recipes output. See podman --pull never
# TODO: Explain this better
#
.SILENT .PHONY: hugo.setup
hugo.setup:

	shopt -s lastpipe

	# Search for Hugo container image in local cache. If not found fetch it.

	$(PODMAN) image ls --format '{{.Repository}}:{{.Tag}}' \
	| sed 's!^!docker://!' \
	| { grep '$(HUGO_CTN_IMAGE)' || true ; } \
	| wc -l \
	| read -r matches

	if [ $$matches -eq 0 ] ; then
		echo "Fetching Hugo ..."
		$(PODMAN) pull '$(HUGO_CTN_IMAGE)'
	fi

# General dependency rule for hugo-generated files
$(hugoBuildDir)/%: $(hugoBuildDeps)
	$(MAKE) hugo.build
